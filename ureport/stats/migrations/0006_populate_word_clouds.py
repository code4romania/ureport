# Generated by Django 2.2.5 on 2019-11-07 14:29

from django.db import connection, migrations

from ureport.utils import get_dict_from_cursor


def populate_poll_word_clouds(apps, schema_editor):
    PollQuestion = apps.get_model("polls", "PollQuestion")
    Org = apps.get_model("orgs", "Org")
    PollWordCloud = apps.get_model("stats", "PollWordCloud")

    for org in Org.objects.all():
        questions = (
            PollQuestion.objects.filter(poll__org_id=org.id)
            .select_related("poll")
            .prefetch_related("response_categories")
        )

        for question in questions:
            open_ended = (
                question.response_categories.filter(is_active=True).exclude(category__icontains="no response").count()
                == 1
            )

            if open_ended:
                custom_sql = """
                          SELECT w.label, count(*) AS count FROM (SELECT regexp_split_to_table(LOWER(text), E'[^[:alnum:]_]') AS label FROM polls_pollresult WHERE polls_pollresult.org_id = %d AND polls_pollresult.flow = '%s' AND polls_pollresult.ruleset = '%s' AND polls_pollresult.text IS NOT NULL AND polls_pollresult.text NOT ILIKE '%s') w group by w.label;
                          """ % (
                    org.id,
                    question.poll.flow_uuid,
                    question.ruleset_uuid,
                    "http%",
                )
                with connection.cursor() as cursor:
                    cursor.execute(custom_sql)
                    unclean_categories = get_dict_from_cursor(cursor)

                categories = {}
                for category in unclean_categories:
                    categories[category["label"]] = int(category["count"])

                poll_word_cloud = PollWordCloud.objects.get_or_create(org=org, question=question)[0]
                poll_word_cloud.words = categories
                poll_word_cloud.save()


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    populate_poll_word_clouds(apps, None)


class Migration(migrations.Migration):
    dependencies = [("stats", "0005_pollwordcloud")]

    operations = [migrations.RunPython(populate_poll_word_clouds, reverse)]
