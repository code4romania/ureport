# Generated by Django 2.2.20 on 2021-07-15 18:01

import time

from django.db import migrations


def noop(apps, schema_editor):  # pragma: no cover
    pass


def populate_flow_results(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    PollQuestion = apps.get_model("polls", "PollQuestion")
    PollResponseCategory = apps.get_model("polls", "PollResponseCategory")

    FlowResult = apps.get_model("flows", "FlowResult")
    FlowResultCategory = apps.get_model("flows", "FlowResultCategory")

    start_time = time.time()
    orgs = Org.objects.all().order_by("id")
    all_count = 0

    for org in orgs:
        poll_questions = PollQuestion.objects.filter(poll__org_id=org.id, flow_result=None).select_related("poll")

        total = poll_questions.count()
        count = 0

        for poll_question in poll_questions:
            flow_uuid = poll_question.poll.flow_uuid
            result_uuid = poll_question.ruleset_uuid
            result_name = poll_question.ruleset_label

            flow_result = FlowResult.objects.filter(org=org, flow_uuid=flow_uuid, result_uuid=result_uuid).first()
            if not flow_result:
                flow_result = FlowResult.objects.create(
                    org=org, flow_uuid=flow_uuid, result_uuid=result_uuid, result_name=result_name
                )

            poll_question.flow_result = flow_result
            poll_question.save()

            poll_response_categories = PollResponseCategory.objects.filter(question=poll_question)

            for poll_response_category in poll_response_categories:
                category = poll_response_category.category
                flow_result_category = FlowResultCategory.objects.filter(
                    flow_result=flow_result, category=category
                ).first()
                if not flow_result_category:
                    flow_result_category = FlowResultCategory.objects.create(
                        flow_result=flow_result, category=category
                    )

                poll_response_category.flow_result_category = flow_result_category
                poll_response_category.save()

            count += 1
            if count % 100 == 0:
                elapsed = time.time() - start_time
                print(f"Migrated {count} of {total} questions on org #{org.id} in {elapsed:.1f} seconds")

        elapsed = time.time() - start_time
        print(f"Migrated {total} questions on org #{org.id} in {elapsed:.1f} seconds")
        all_count += total

    elapsed = time.time() - start_time
    print(f"Finished population flow results for {all_count} poll questions in {elapsed:.1f} seconds")


def apply_manual():  # pragma: no cover
    from django.apps import apps

    populate_flow_results(apps, None)


class Migration(migrations.Migration):
    dependencies = [
        ("polls", "0061_auto_20210715_1418"),
    ]

    operations = [migrations.RunPython(populate_flow_results, noop)]
